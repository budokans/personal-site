[
  {
    "title": "Gretsch Geeks",
    "shortBlurb": "An example E-commerce buy-sell platform built with modern React, Apollo 3 and Keystone.js as a headless CMS.",
    "icon": "/images/gretsch-logo.jpg",
    "tech": [
      "React",
      "Next.js",
      "styled-components",
      "Apollo 3",
      "Keystone.js",
      "GraphQL",
      "postgreSQL",
      "Stripe"
    ],
    "featureMedia": [
      {
        "path": "/images/gretsch-geeks-store-screenshot.png",
        "bg": "#ff0000",
        "alt": "Gretsch Geeks Store Screenshot"
      },
      {
        "path": "/images/gretsch-geeks-cart-open-screenshot.png",
        "bg": "#393939",
        "alt": "Gretsch Geeks with Cart Open Screenshot"
      },
      {
        "path": "/images/gretsch-geeks-order-page-screenshot.png",
        "bg": "#fff",
        "alt": "Gretsch Geeks Order Page Screenshot"
      },
      {
        "path": "/images/gretsch-geeks-admin-area-screenshot.png",
        "bg": "#3b82f6",
        "alt": "Gretsch Geeks Admin Area Screenshot"
      },
      {
        "path": "/images/gretsch-geeks-performance-screenshot.png",
        "bg": "white",
        "alt": "Gretsch Geeks Lighthouse Performance Screenshot"
      }
    ],
    "description": [
      "The foundations of the project were laid while completing Wes Bos's huge <a href='https://advancedreact.com/' rel='noreferrer noopener' target='_blank' style='font-weight: 500'>Advanced React with GraphQL</a> course, but the final result was buggy and impossible to deploy in its finished state.",
      "To fix this, I added much more robust error-handling throughout the application, rebuilt the app with the latest version of Keystone JS, rebuilt the database in postgreSQL as Keystone had now dropped support for Mongoose and moved to Prisma, and successfully deployed to Heroku.",
      "I also fixed a litany of other bugs, created all mobile styles and made the frontend responsive, eliminated Cumulative Layout Shift and made the app much more intuitive to use."
    ],
    "url": "https://gretsch.stevenwebster.co"
  },
  {
    "title": "Netflix Clone",
    "shortBlurb": "A clone of the late-2020 Netflix front-end experience, with Firebase for authorization and server.",
    "icon": "/images/netflix-logo.jfif",
    "tech": ["React", "styled-components", "Firebase"],
    "featureMedia": [
      {
        "path": "/images/netflix-jumbotron-screenshot.png",
        "bg": "#e50914",
        "alt": "Netflix Clone Jumbotron Screenshot"
      },
      {
        "path": "/images/netflix-feature-screenshot.png",
        "bg": "#222",
        "alt": "Netflix Clone Feature Screenshot"
      },
      {
        "path": "/images/netflix-mobile.png",
        "bg": "#0000000a",
        "alt": "Netflix Clone Mobile Screenshot"
      },
      {
        "path": "/images/netflix-browse-screenshot.png",
        "bg": "black",
        "alt": "Netflix Clone Browse Screenshot"
      },
      {
        "path": "/images/netflix-home-page-screenshot.png",
        "bg": "#222",
        "alt": "Netflix Clone Home Page Screenshot"
      }
    ],
    "description": [
      "Pretty self-explanatory, really.",
      "This was my first time using the styled-components - or any CSS-in-JSX styling pattern - and also my first run with compound components.",
      "While compound components were certainly flexible, it's an awful lot of prop-spreading and it becomes problematic if you want robust prop type-checking.. But it was good to get a feel for the pattern none-the-less.",
      "Firebase made it super quick to get set up with user auth, and Fuse.js provided a simple and effective search solution that was easy to get working with quickly."
    ],
    "url": "http://netflix.stevenwebster.co"
  },
  {
    "title": "Story Typer",
    "shortBlurb": "A race-the-clock, retro-themed speed-typing game for desktop browsers with context scraped daily from fiftywordstories.com",
    "icon": "/images/story-typer-logo.jpg",
    "iconFallback": "",
    "tech": ["React", "Next.js", "BEM", "Node.js", "Express", "Cheerio JS"],
    "featureMedia": [
      {
        "path": "/images/story-typer-error-screenshot.png",
        "bg": "#0f0",
        "alt": "Story Typer Gameplay Screenshot"
      },
      {
        "path": "/images/story-typer-light-theme-screenshot.png",
        "bg": "#e9bc90",
        "alt": "Story Typer Light Theme Screenshot"
      },
      {
        "path": "/images/story-typer-win-screenshot.png",
        "bg": "#ffd700",
        "alt": "Story Typer Game Over Screenshot"
      },
      {
        "path": "/images/story-typer-difficulties-screenshot.png",
        "bg": "#00db00",
        "alt": "Story Typer Difficulties Screenshot"
      },
      {
        "path": "/images/story-typer-performance-screenshot.png",
        "bg": "white",
        "alt": "Story Typer Lighthouse Performance Screenshot"
      }
    ],
    "description": [
      "Finding myself spending a lot of time on speed-typing apps like <a href='https://play.typeracer.com' rel='noreferrer noopener' target='_blank' style='font-weight: 500'>TypeRacer</a>, I decided to craft one of my own for my first React project.",
      "Rather than the usual open-ended stopwatch-timed game, I decided to go for a countdown clock to put more pressure on the player. This necessitated texts of roughly equal length - enter <a href='http://fiftywordstories.com' rel='noreferrer noopener' target='_blank' style='font-weight: 500'>fiftywordstories.com</a>.",
      "Unhappy with the overhead of manually inputting the stories and other meta information myself, I built an Express server and wrote a scraper with Cheerio JS that pushes all the scraped data to a mongoDB server.",
      "It was also a great Regex workout to get all the formatting done correctly as the stories are scraped!"
    ],
    "url": "https://storytyper.stevenwebster.co"
  },
  {
    "title": "stevenwebster.co",
    "shortBlurb": "You're here right now! My personal site with a perfect Google Lighthouse score!",
    "icon": "/images/stevenwebster.co-logo.png",
    "tech": ["React", "Next.js", "TypeScript", "Chakra UI", "Framer Motion"],
    "featureMedia": [
      {
        "path": "/images/stevenwebster.co-performance.png",
        "bg": "#e2e8f0",
        "alt": "Stevenwebster.co Lighthouse Performance Screenshot"
      }
    ],
    "description": [
      "My first time using a React UI component library instead of building most components entirely from scratch, and I'm happy with the result, scoring 100/100 in Performance, Accessibility, Best Practices and SEO with Google Lighthouse.",
      "I chose new-kid-on-the-block Chakra UI over more established alternatives like Material UI, and Chakra integrates easily with Framer Motion to make draggable components and animations a breeze.",
      "Completely statically generated with Next.js so it's blazing fast, with images stored locally and optimized on-the-fly with Next's Image component.",
      "Deployed on Vercel, and crafted using the Develop, Preview, Ship workflow."
    ]
  }
]
